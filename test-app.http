### Test App HTTP - Simulate Valid and Invalid Accesses to /protected
### This file simulates traffic patterns to trigger KQL alerts

@baseUrl = https://assignment-falskapp-fhhqazexdqgtdthe.eastus-01.azurewebsites.net
@valid_token = eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaXNzIjoiaHR0cHM6Ly9kZXYtdm1kdDM2N212MWhvYXg1bC51cy5hdXRoMC5jb20vIn0..vZieycxJPn5n-WOX.k6KO4h_JwspWqOm2nJrdBi_KlDFBfWla1lHXm0NT43MhnfDZaZtgMMqwveF91goJdHU3Qy5GqVnu_MdL1mHnDF5-je2qgi1lPxc5a1x8sHNC_tmIhuyBnJ0U1239OmydJY70XfmBsQvXJxU7ptMQOszIgDNdhQ3CdYS9ZstxOvEX2FPYvcNHzxdH7iY9crkpKxdB1I8n5MwV1G-OttQXZTlf9B_Uk5SO8iwxLwpcjlQtE8I8oduBPE1dBAI56Lm4bRD7tiZvwQrBIXxgTLu9nqgVAubE-AOdjzow3GUTEbdu-uEH1k5X2lKczH69iL8palexFsuGq6HSJYDgw_gszaqeGP8yAOo.FWUi9q_dRvomkgt3khO2zA
    
### IMPORTANT: To get a valid Auth0 token:
### 1. Open browser and go to {{baseUrl}}/protected
### 2. Complete Auth0 login flow
### 3. Use browser dev tools to extract the JWT token from cookies/local storage
### 4. Replace {{valid_token}} with the actual token

### ============================================
### VALID ACCESS SIMULATION (WITH AUTH TOKEN)
### ============================================

### Valid Access #1
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #2
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #3
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #4
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #5
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #6
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #7
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #8
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #9
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #10
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #11 (Should trigger alert - >10 accesses)
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #12 (Should trigger alert)
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #13 (Should trigger alert)
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #14 (Should trigger alert)
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### Valid Access #15 (Should trigger alert)
GET {{baseUrl}}/protected
Authorization: Bearer {{valid_token}}
User-Agent: TestUser-001

###

### ============================================
### INVALID ACCESS SIMULATION (NO AUTH TOKEN)
### ============================================

### Invalid Access #1 (No token)
GET {{baseUrl}}/protected
User-Agent: UnauthorizedUser-001

###

### Invalid Access #2 (No token)
GET {{baseUrl}}/protected
User-Agent: UnauthorizedUser-001

###

### Invalid Access #3 (Invalid token)
GET {{baseUrl}}/protected
Authorization: Bearer invalid_token_123
User-Agent: UnauthorizedUser-002

###

### Invalid Access #4 (Expired token)
GET {{baseUrl}}/protected
Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImV4cCI6MTUxNjIzOTAyMn0.expired_token
User-Agent: UnauthorizedUser-003

###

### Invalid Access #5 (Malformed token)
GET {{baseUrl}}/protected
Authorization: Bearer malformed.token.here
User-Agent: UnauthorizedUser-004

###

### ============================================
### ATTACK SIMULATION
### ============================================

### Path Traversal Attempt
GET {{baseUrl}}/protected/../admin
User-Agent: AttackBot-001

###

### Query Parameter Bypass Attempt
GET {{baseUrl}}/protected?bypass=true
User-Agent: AttackBot-002

###

### SQL Injection Attempt
GET {{baseUrl}}/protected?id=1' OR '1'='1
User-Agent: AttackBot-003

###

### XSS Attempt
GET {{baseUrl}}/protected?search=<script>alert('xss')</script>
User-Agent: AttackBot-004

###

### Admin Panel Access Attempt
GET {{baseUrl}}/admin
User-Agent: AttackBot-005

###

### API Secret Access Attempt
GET {{baseUrl}}/api/secret
User-Agent: AttackBot-006

###

### INSTRUCTIONS:
### 1. Replace {{valid_token}} with a real Auth0 JWT token
### 2. Run the valid access requests (15 times) to trigger the KQL alert
### 3. Run the invalid access requests to generate unauthorized logs
### 4. Monitor Azure Log Analytics for the log entries
### 5. Verify that the KQL alert triggers for >10 accesses in 15 minutes